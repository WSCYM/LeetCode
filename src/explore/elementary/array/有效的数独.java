package explore.elementary.array;

import java.util.HashSet;

/**
 * @author ym
 * @version 1.0.0
 * @ClassName 有效的数独
 * @Description
 *
 * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
 *
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
 *
 *
 * 上图是一个部分填充的有效的数独。
 *
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 *
 * 示例 1:
 *
 * 输入:
 * [
 *   ["5","3",".",".","7",".",".",".","."],
 *   ["6",".",".","1","9","5",".",".","."],
 *   [".","9","8",".",".",".",".","6","."],
 *   ["8",".",".",".","6",".",".",".","3"],
 *   ["4",".",".","8",".","3",".",".","1"],
 *   ["7",".",".",".","2",".",".",".","6"],
 *   [".","6",".",".",".",".","2","8","."],
 *   [".",".",".","4","1","9",".",".","5"],
 *   [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: true
 * 示例 2:
 *
 * 输入:
 * [
 *   ["8","3",".",".","7",".",".",".","."],
 *   ["6",".",".","1","9","5",".",".","."],
 *   [".","9","8",".",".",".",".","6","."],
 *   ["8",".",".",".","6",".",".",".","3"],
 *   ["4",".",".","8",".","3",".",".","1"],
 *   ["7",".",".",".","2",".",".",".","6"],
 *   [".","6",".",".",".",".","2","8","."],
 *   [".",".",".","4","1","9",".",".","5"],
 *   [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: false
 * 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
 *      但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 * 说明:
 *
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 给定数独序列只包含数字 1-9 和字符 '.' 。
 * 给定数独永远是 9x9 形式的。
 *
 * @createTime 2020-07-01 00:45:00
 */
public class 有效的数独 {
    public boolean isValidSudioku(char[][] board) {
        HashSet<Character> hashSetRow = new HashSet<>();
        HashSet<Character> hashSetCol = new HashSet<>();
        HashSet<Character> hashSet = new HashSet<>();
        for (int i = 0;i<9;i++){
            for (int j = 0;j<9;j++){
                if (hashSetRow.contains(board[i][j])){
                    return false;
                } else {
                    if (board[i][j]!='.'){
                        hashSetRow.add(board[i][j]);
                    }
                }

                if (hashSetCol.contains(board[j][i])){
                    return false;
                } else {
                    if (board[j][i]!='.'){
                        hashSetCol.add(board[j][i]);
                    }
                }
            }
            hashSetRow.clear();
            hashSetCol.clear();
        }
        for (int i = 0;i<3;i++){
            for (int j = 0;j<3;j++){
                int r = i*3;
                int endR = i*3+3;
                for (;r<endR;r++){
                    int c = j*3;
                    int endC = j*3+3;
                    for (;c<endC;c++){
                        if (hashSet.contains(board[r][c])){
                            return false;
                        } else {
                            if (board[r][c]!='.'){
                                hashSet.add(board[r][c]);
                            }
                        }
                    }
                }
                hashSet.clear();
            }
        }
        return true;
    }

    public static void main(String[] args) {
        char[][] a = new char[][]{
                {'.','.','.','.','5','.','.','1','.'},
                {'.','4','.','3','.','.','.','.','.'},
                {'.','.','.','.','.','3','.','.','1'},
                {'8','.','.','.','.','.','.','2','.'},
                {'.','.','2','.','7','.','.','.','.'},
                {'.','1','5','.','.','.','.','.','.'},
                {'.','.','.','.','.','2','.','.','.'},
                {'.','2','.','9','.','.','.','.','.'},
                {'.','.','4','.','.','.','.','.','.'}
        };

        System.out.println(new 有效的数独().isValidSudioku(a));
    }
}
